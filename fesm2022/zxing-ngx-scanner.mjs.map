{"version":3,"file":"zxing-ngx-scanner.mjs","sources":["../../../projects/zxing-scanner/src/lib/browser-multi-format-continuous-reader.ts","../../../projects/zxing-scanner/src/lib/zxing-scanner.component.ts","../../../projects/zxing-scanner/src/lib/zxing-scanner.component.html","../../../projects/zxing-scanner/src/lib/zxing-scanner.module.ts","../../../projects/zxing-scanner/src/public_api.ts","../../../projects/zxing-scanner/src/zxing-ngx-scanner.ts"],"sourcesContent":["import { ChecksumException, FormatException, NotFoundException } from '@zxing/library';\r\nimport { BrowserMultiFormatReader, IScannerControls } from '@zxing/browser';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { ResultAndError } from './ResultAndError';\r\n\r\n/**\r\n * Based on zxing-typescript BrowserCodeReader\r\n */\r\nexport class BrowserMultiFormatContinuousReader extends BrowserMultiFormatReader {\r\n\r\n  /**\r\n   * Allows to call scanner controls API while scanning.\r\n   * Will be undefined if no scanning is running.\r\n   */\r\n  protected scannerControls: IScannerControls;\r\n\r\n  /**\r\n   * Returns the code reader scanner controls.\r\n   */\r\n  public getScannerControls(): IScannerControls {\r\n    if (!this.scannerControls) {\r\n      throw new Error('No scanning is running at the time.');\r\n    }\r\n    return this.scannerControls;\r\n  }\r\n\r\n  /**\r\n   * Starts the decoding from the current or a new video element.\r\n   *\r\n   * @param deviceId The device's to be used Id\r\n   * @param previewEl A new video element\r\n   */\r\n  public async scanFromDeviceObservable(\r\n    deviceId?: string,\r\n    previewEl?: HTMLVideoElement\r\n  ): Promise<Observable<ResultAndError>> {\r\n\r\n    const scan$ = new BehaviorSubject<ResultAndError>({});\r\n    let ctrls;\r\n\r\n    try {\r\n      ctrls = await this.decodeFromVideoDevice(deviceId, previewEl, (result, error) => {\r\n\r\n        if (!error) {\r\n          scan$.next({ result });\r\n          return;\r\n        }\r\n\r\n        const errorName = error.name;\r\n\r\n        // stream cannot stop on fails.\r\n        if (\r\n          // scan Failure - found nothing, no error\r\n          errorName === NotFoundException.name ||\r\n          // scan Error - found the QR but got error on decoding\r\n          errorName === ChecksumException.name ||\r\n          errorName === FormatException.name ||\r\n          error.message.includes('No MultiFormat Readers were able to detect the code.')\r\n        ) {\r\n          scan$.next({ error });\r\n          return;\r\n        }\r\n\r\n        // probably fatal error\r\n        scan$.error(error);\r\n        this.scannerControls.stop();\r\n        this.scannerControls = undefined;\r\n        return;\r\n      });\r\n\r\n      this.scannerControls = {\r\n        ...ctrls,\r\n        stop() {\r\n          ctrls.stop();\r\n          scan$.complete();\r\n        },\r\n      };\r\n    } catch (e) {\r\n      scan$.error(e);\r\n      this.scannerControls?.stop();\r\n      this.scannerControls = undefined;\r\n    }\r\n\r\n    return scan$.asObservable();\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { BrowserCodeReader } from '@zxing/browser';\r\nimport {\r\n  BarcodeFormat,\r\n  DecodeHintType,\r\n  Exception,\r\n  Result\r\n} from '@zxing/library';\r\nimport { Subscription } from 'rxjs';\r\nimport { BrowserMultiFormatContinuousReader } from './browser-multi-format-continuous-reader';\r\nimport { ResultAndError } from './ResultAndError';\r\n\r\n\r\n@Component({\r\n  selector: 'zxing-scanner',\r\n  templateUrl: './zxing-scanner.component.html',\r\n  styleUrls: ['./zxing-scanner.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ZXingScannerComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Supported Hints map.\r\n   */\r\n  private _hints: Map<DecodeHintType, any> | null;\r\n\r\n  /**\r\n   * The ZXing code reader.\r\n   */\r\n  private _codeReader: BrowserMultiFormatContinuousReader;\r\n\r\n  /**\r\n   * The device that should be used to scan things.\r\n   */\r\n  private _device: MediaDeviceInfo;\r\n\r\n  /**\r\n   * The device that should be used to scan things.\r\n   */\r\n  private _enabled: boolean;\r\n\r\n  /**\r\n   *\r\n   */\r\n  private _isAutostarting: boolean;\r\n\r\n  /**\r\n   * Has `navigator` access.\r\n   */\r\n  private hasNavigator: boolean;\r\n\r\n  /**\r\n   * Says if some native API is supported.\r\n   */\r\n  private isMediaDevicesSupported: boolean;\r\n\r\n  /**\r\n   * If the user-agent allowed the use of the camera or not.\r\n   */\r\n  private hasPermission: boolean | null;\r\n\r\n  /**\r\n   * Unsubscribe to stop scanning.\r\n   */\r\n  private _scanSubscription?: Subscription;\r\n\r\n  /**\r\n   * Reference to the preview element, should be the `video` tag.\r\n   */\r\n  @ViewChild('preview', { static: true })\r\n  previewElemRef: ElementRef<HTMLVideoElement>;\r\n\r\n  /**\r\n   * Enable or disable autofocus of the camera (might have an impact on performance)\r\n   */\r\n  @Input()\r\n  autofocusEnabled: boolean;\r\n\r\n  /**\r\n   * Delay between attempts to decode (default is 500ms)\r\n   */\r\n  @Input()\r\n  timeBetweenScans = 500;\r\n\r\n  /**\r\n   * Delay between successful decode (default is 500ms)\r\n   */\r\n  @Input()\r\n  delayBetweenScanSuccess = 500;\r\n\r\n  /**\r\n   * Emits when and if the scanner is autostarted.\r\n   */\r\n  @Output()\r\n  autostarted: EventEmitter<void>;\r\n\r\n  /**\r\n   * True during autostart and false after. It will be null if won't autostart at all.\r\n   */\r\n  @Output()\r\n  autostarting: EventEmitter<boolean>;\r\n\r\n  /**\r\n   * If the scanner should autostart with the first available device.\r\n   */\r\n  @Input()\r\n  autostart: boolean;\r\n\r\n  /**\r\n   * How the preview element should be fit inside the :host container.\r\n   */\r\n  @Input()\r\n  previewFitMode: 'fill' | 'contain' | 'cover' | 'scale-down' | 'none' = 'cover';\r\n\r\n  /**\r\n   * Url of the HTML video poster\r\n   */\r\n  @Input()\r\n  poster: string = '';\r\n\r\n  /**\r\n   * Emits events when the torch compatibility is changed.\r\n   */\r\n  @Output()\r\n  torchCompatible: EventEmitter<boolean>;\r\n\r\n  /**\r\n   * Emits events when a scan is successful performed, will inject the string value of the QR-code to the callback.\r\n   */\r\n  @Output()\r\n  scanSuccess: EventEmitter<string>;\r\n\r\n  /**\r\n   * Emits events when a scan fails without errors, useful to know how much scan tries where made.\r\n   */\r\n  @Output()\r\n  scanFailure: EventEmitter<Exception | undefined>;\r\n\r\n  /**\r\n   * Emits events when a scan throws some error, will inject the error to the callback.\r\n   */\r\n  @Output()\r\n  scanError: EventEmitter<Error>;\r\n\r\n  /**\r\n   * Emits events when a scan is performed, will inject the Result value of the QR-code scan (if available) to the callback.\r\n   */\r\n  @Output()\r\n  scanComplete: EventEmitter<Result>;\r\n\r\n  /**\r\n   * Emits events when no cameras are found, will inject an exception (if available) to the callback.\r\n   */\r\n  @Output()\r\n  camerasFound: EventEmitter<MediaDeviceInfo[]>;\r\n\r\n  /**\r\n   * Emits events when no cameras are found, will inject an exception (if available) to the callback.\r\n   */\r\n  @Output()\r\n  camerasNotFound: EventEmitter<any>;\r\n\r\n  /**\r\n   * Emits events when the users answers for permission.\r\n   */\r\n  @Output()\r\n  permissionResponse: EventEmitter<boolean>;\r\n\r\n  /**\r\n   * Emits events when has devices status is update.\r\n   */\r\n  @Output()\r\n  hasDevices: EventEmitter<boolean>;\r\n\r\n  private _ready = false;\r\n\r\n  private _devicePreStart: MediaDeviceInfo;\r\n\r\n  /**\r\n   * Exposes the current code reader, so the user can use it's APIs.\r\n   */\r\n  get codeReader(): BrowserMultiFormatContinuousReader {\r\n    return this._codeReader;\r\n  }\r\n\r\n  /**\r\n   * User device input\r\n   */\r\n  @Input()\r\n  set device(device: MediaDeviceInfo | undefined) {\r\n\r\n    if (!this._ready) {\r\n      this._devicePreStart = device;\r\n      // let's ignore silently, users don't like logs\r\n      return;\r\n    }\r\n\r\n    if (this.isAutostarting) {\r\n      // do not allow setting devices during auto-start, since it will set one and emit it.\r\n      console.warn('Avoid setting a device during auto-start.');\r\n      return;\r\n    }\r\n\r\n    if (this.isCurrentDevice(device)) {\r\n      console.warn('Setting the same device is not allowed.');\r\n      return;\r\n    }\r\n\r\n    if (!this.hasPermission) {\r\n      console.warn('Permissions not set yet, waiting for them to be set to apply device change.');\r\n      // this.permissionResponse\r\n      //   .pipe(\r\n      //     take(1),\r\n      //     tap(() => console.log(`Permissions set, applying device change${device ? ` (${device.deviceId})` : ''}.`))\r\n      //   )\r\n      //   .subscribe(() => this.device = device);\r\n      return;\r\n    }\r\n\r\n    this.setDevice(device);\r\n  }\r\n\r\n  /**\r\n   * Emits when the current device is changed.\r\n   */\r\n  @Output()\r\n  deviceChange: EventEmitter<MediaDeviceInfo>;\r\n\r\n  /**\r\n   * User device accessor.\r\n   */\r\n  get device() {\r\n    return this._device;\r\n  }\r\n\r\n  /**\r\n   * Returns all the registered formats.\r\n   */\r\n  get formats(): BarcodeFormat[] {\r\n    return this.hints.get(DecodeHintType.POSSIBLE_FORMATS);\r\n  }\r\n\r\n  /**\r\n   * Registers formats the scanner should support.\r\n   *\r\n   * @param input BarcodeFormat or case-insensitive string array.\r\n   */\r\n  @Input()\r\n  set formats(input: BarcodeFormat[]) {\r\n\r\n    if (typeof input === 'string') {\r\n      throw new Error('Invalid formats, make sure the [formats] input is a binding.');\r\n    }\r\n\r\n    // formats may be set from html template as BarcodeFormat or string array\r\n    const formats = input.map(f => this.getBarcodeFormatOrFail(f));\r\n\r\n    const hints = this.hints;\r\n\r\n    // updates the hints\r\n    hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);\r\n\r\n    // handles updating the codeReader\r\n    this.hints = hints;\r\n  }\r\n\r\n  /**\r\n   * Returns all the registered hints.\r\n   */\r\n  get hints() {\r\n    return this._hints;\r\n  }\r\n\r\n  /**\r\n   * Does what it takes to set the hints.\r\n   */\r\n  set hints(hints: Map<DecodeHintType, any>) {\r\n    this._hints = hints;\r\n    // new instance with new hints.\r\n    this.codeReader?.setHints(this._hints);\r\n  }\r\n\r\n  /**\r\n   * Sets the desired constraints in all video tracks.\r\n   * @experimental\r\n   */\r\n  @Input()\r\n  set videoConstraints(constraints: MediaTrackConstraints) {\r\n    // new instance with new hints.\r\n    const controls = this.codeReader?.getScannerControls();\r\n\r\n    if (!controls) {\r\n      // fails silently\r\n      return;\r\n    }\r\n\r\n    controls?.streamVideoConstraintsApply(constraints);\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  set isAutostarting(state: boolean) {\r\n    this._isAutostarting = state;\r\n    this.autostarting.next(state);\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  get isAutostarting(): boolean {\r\n    return this._isAutostarting;\r\n  }\r\n\r\n  /**\r\n   * Can turn on/off the device flashlight.\r\n   *\r\n   * @experimental Torch/Flash APIs are not stable in all browsers, it may be buggy!\r\n   */\r\n  @Input()\r\n  set torch(onOff: boolean) {\r\n    try {\r\n      const controls = this.getCodeReader().getScannerControls();\r\n      controls.switchTorch(onOff);\r\n    } catch (error) {\r\n      // ignore error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts and Stops the scanning.\r\n   */\r\n  @Input()\r\n  set enable(enabled: boolean) {\r\n\r\n    this._enabled = Boolean(enabled);\r\n\r\n    if (!this._enabled) {\r\n      this.reset();\r\n      BrowserMultiFormatContinuousReader.releaseAllStreams();\r\n    } else {\r\n      if (this.device) {\r\n        this.scanFromDevice(this.device.deviceId);\r\n      } else {\r\n        this.init();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tells if the scanner is enabled or not.\r\n   */\r\n  get enabled(): boolean {\r\n    return this._enabled;\r\n  }\r\n\r\n  /**\r\n   * If is `tryHarder` enabled.\r\n   */\r\n  get tryHarder(): boolean {\r\n    return this.hints.get(DecodeHintType.TRY_HARDER);\r\n  }\r\n\r\n  /**\r\n   * Enable/disable tryHarder hint.\r\n   */\r\n  @Input()\r\n  set tryHarder(enable: boolean) {\r\n\r\n    const hints = this.hints;\r\n\r\n    if (enable) {\r\n      hints.set(DecodeHintType.TRY_HARDER, true);\r\n    } else {\r\n      hints.delete(DecodeHintType.TRY_HARDER);\r\n    }\r\n\r\n    this.hints = hints;\r\n  }\r\n\r\n  /**\r\n   * Constructor to build the object and do some DI.\r\n   */\r\n  constructor() {\r\n    // instance based emitters\r\n    this.autostarted = new EventEmitter();\r\n    this.autostarting = new EventEmitter();\r\n    this.torchCompatible = new EventEmitter(false);\r\n    this.scanSuccess = new EventEmitter();\r\n    this.scanFailure = new EventEmitter();\r\n    this.scanError = new EventEmitter();\r\n    this.scanComplete = new EventEmitter();\r\n    this.camerasFound = new EventEmitter();\r\n    this.camerasNotFound = new EventEmitter();\r\n    this.permissionResponse = new EventEmitter(true);\r\n    this.hasDevices = new EventEmitter();\r\n    this.deviceChange = new EventEmitter();\r\n\r\n    this._enabled = true;\r\n    this._hints = new Map<DecodeHintType, any>();\r\n    this.autofocusEnabled = true;\r\n    this.autostart = true;\r\n    this.formats = [BarcodeFormat.QR_CODE];\r\n\r\n    // computed data\r\n    this.hasNavigator = typeof navigator !== 'undefined';\r\n    this.isMediaDevicesSupported = this.hasNavigator && !!navigator.mediaDevices;\r\n  }\r\n\r\n  /**\r\n   * Gets and registers all cameras.\r\n   */\r\n  async askForPermission(): Promise<boolean> {\r\n\r\n    if (!this.hasNavigator) {\r\n      console.error('@zxing/ngx-scanner', 'Can\\'t ask permission, navigator is not present.');\r\n      this.setPermission(null);\r\n      return this.hasPermission;\r\n    }\r\n\r\n    if (!this.isMediaDevicesSupported) {\r\n      console.error('@zxing/ngx-scanner', 'Can\\'t get user media, this is not supported.');\r\n      this.setPermission(null);\r\n      return this.hasPermission;\r\n    }\r\n\r\n    let stream: MediaStream;\r\n    let permission: boolean;\r\n\r\n    try {\r\n      // Will try to ask for permission\r\n      stream = await this.getAnyVideoDevice();\r\n      permission = !!stream;\r\n    } catch (err) {\r\n      return this.handlePermissionException(err);\r\n    } finally {\r\n      this.terminateStream(stream);\r\n    }\r\n\r\n    this.setPermission(permission);\r\n\r\n    // Returns the permission\r\n    return permission;\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  getAnyVideoDevice(): Promise<MediaStream> {\r\n    return navigator.mediaDevices.getUserMedia({ video: true });\r\n  }\r\n\r\n  /**\r\n   * Terminates a stream and it's tracks.\r\n   */\r\n  private terminateStream(stream: MediaStream) {\r\n\r\n    if (stream) {\r\n      stream.getTracks().forEach(t => t.stop());\r\n    }\r\n\r\n    stream = undefined;\r\n  }\r\n\r\n  private async init() {\r\n    if (!this.autostart) {\r\n      console.warn('Feature \\'autostart\\' disabled. Permissions and devices recovery has to be run manually.');\r\n\r\n      // does the necessary configuration without autostarting\r\n      this.initAutostartOff();\r\n\r\n      this._ready = true;\r\n\r\n      return;\r\n    }\r\n\r\n    // configures the component and starts the scanner\r\n    await this.initAutostartOn();\r\n\r\n    this._ready = true;\r\n  }\r\n\r\n  /**\r\n   * Initializes the component without starting the scanner.\r\n   */\r\n  private initAutostartOff(): void {\r\n\r\n    // do not ask for permission when autostart is off\r\n    this.isAutostarting = false;\r\n\r\n    // just update devices information\r\n    this.updateVideoInputDevices();\r\n\r\n    if (this._device && this._devicePreStart) {\r\n      this.setDevice(this._devicePreStart);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes the component and starts the scanner.\r\n   * Permissions are asked to accomplish that.\r\n   */\r\n  private async initAutostartOn(): Promise<void> {\r\n\r\n    this.isAutostarting = true;\r\n\r\n    let hasPermission: boolean;\r\n\r\n    try {\r\n      // Asks for permission before enumerating devices so it can get all the device's info\r\n      hasPermission = await this.askForPermission();\r\n    } catch (e) {\r\n      console.error('Exception occurred while asking for permission:', e);\r\n      return;\r\n    }\r\n\r\n    // from this point, things gonna need permissions\r\n    if (hasPermission) {\r\n      const devices = await this.updateVideoInputDevices();\r\n      await this.autostartScanner([...devices]);\r\n    }\r\n\r\n    this.isAutostarting = false;\r\n    this.autostarted.next();\r\n  }\r\n\r\n  /**\r\n   * Checks if the given device is the current defined one.\r\n   */\r\n  isCurrentDevice(device?: MediaDeviceInfo) {\r\n    return device?.deviceId === this._device?.deviceId;\r\n  }\r\n\r\n  /**\r\n   * Executes some actions before destroy the component.\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.reset();\r\n    BrowserMultiFormatContinuousReader.releaseAllStreams();\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  ngOnInit(): void {\r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * Stops the scanning, if any.\r\n   */\r\n  public scanStop() {\r\n    if (this._scanSubscription) {\r\n      this.codeReader?.getScannerControls().stop();\r\n      this._scanSubscription?.unsubscribe();\r\n      this._scanSubscription = undefined;\r\n    }\r\n    this.torchCompatible.next(false);\r\n  }\r\n\r\n  /**\r\n   * Stops the scanning, if any.\r\n   */\r\n  public scanStart() {\r\n\r\n    if (this._scanSubscription) {\r\n      throw new Error('There is already a scan process running.');\r\n    }\r\n\r\n    if (!this._device) {\r\n      throw new Error('No device defined, cannot start scan, please define a device.');\r\n    }\r\n\r\n    this.scanFromDevice(this._device.deviceId);\r\n  }\r\n\r\n  /**\r\n   * Stops old `codeReader` and starts scanning in a new one.\r\n   */\r\n  restart(): void {\r\n    // note only necessary for now because of the Torch\r\n    this._codeReader = undefined;\r\n\r\n    const prevDevice = this._reset();\r\n\r\n    if (!prevDevice) {\r\n      return;\r\n    }\r\n\r\n    this.device = prevDevice;\r\n  }\r\n\r\n  /**\r\n   * Discovers and updates known video input devices.\r\n   */\r\n  async updateVideoInputDevices(): Promise<MediaDeviceInfo[]> {\r\n\r\n    // permissions aren't needed to get devices, but to access them and their info\r\n    const devices = await BrowserCodeReader.listVideoInputDevices() || [];\r\n    const hasDevices = devices && devices.length > 0;\r\n\r\n    // stores discovered devices and updates information\r\n    this.hasDevices.next(hasDevices);\r\n    this.camerasFound.next([...devices]);\r\n\r\n    if (!hasDevices) {\r\n      this.camerasNotFound.next(null);\r\n    }\r\n\r\n    return devices;\r\n  }\r\n\r\n  /**\r\n   * Starts the scanner with the back camera otherwise take the last\r\n   * available device.\r\n   */\r\n  private async autostartScanner(devices: MediaDeviceInfo[]): Promise<void> {\r\n\r\n    const matcher = ({ label }) => /back|trás|rear|traseira|environment|ambiente/gi.test(label);\r\n\r\n    // select the rear camera by default, otherwise take the last camera.\r\n    const device = devices.find(matcher) || devices.pop();\r\n\r\n    if (!device) {\r\n      throw new Error('Impossible to autostart, no input devices available.');\r\n    }\r\n\r\n    await this.setDevice(device);\r\n\r\n    this.deviceChange.next(device);\r\n  }\r\n\r\n  /**\r\n   * Dispatches the scan success event.\r\n   *\r\n   * @param result the scan result.\r\n   */\r\n  private dispatchScanSuccess(result: Result): void {\r\n    this.scanSuccess.next(result.getText());\r\n  }\r\n\r\n  /**\r\n   * Dispatches the scan failure event.\r\n   */\r\n  private dispatchScanFailure(reason?: Exception): void {\r\n    this.scanFailure.next(reason);\r\n  }\r\n\r\n  /**\r\n   * Dispatches the scan error event.\r\n   *\r\n   * @param error the error thing.\r\n   */\r\n  private dispatchScanError(error: any): void {\r\n    if (!this.scanError.observed) {\r\n      console.error(`zxing scanner component: ${error.name}`, error);\r\n      console.warn('Use the `(scanError)` property to handle errors like this!');\r\n    }\r\n    this.scanError.next(error);\r\n  }\r\n\r\n  /**\r\n   * Dispatches the scan event.\r\n   *\r\n   * @param result the scan result.\r\n   */\r\n  private dispatchScanComplete(result: Result): void {\r\n    this.scanComplete.next(result);\r\n  }\r\n\r\n  /**\r\n   * Returns the filtered permission.\r\n   */\r\n  private handlePermissionException(err: DOMException): boolean {\r\n\r\n    // failed to grant permission to video input\r\n    console.error('@zxing/ngx-scanner', 'Error when asking for permission.', err);\r\n\r\n    let permission: boolean;\r\n\r\n    switch (err.name) {\r\n\r\n      // usually caused by not secure origins\r\n      case 'NotSupportedError':\r\n        console.warn('@zxing/ngx-scanner', err.message);\r\n        // could not claim\r\n        permission = null;\r\n        // can't check devices\r\n        this.hasDevices.next(null);\r\n        break;\r\n\r\n      // user denied permission\r\n      case 'NotAllowedError':\r\n        console.warn('@zxing/ngx-scanner', err.message);\r\n        // claimed and denied permission\r\n        permission = false;\r\n        // this means that input devices exists\r\n        this.hasDevices.next(true);\r\n        break;\r\n\r\n      // the device has no attached input devices\r\n      case 'NotFoundError':\r\n        console.warn('@zxing/ngx-scanner', err.message);\r\n        // no permissions claimed\r\n        permission = null;\r\n        // because there was no devices\r\n        this.hasDevices.next(false);\r\n        // tells the listener about the error\r\n        this.camerasNotFound.next(err);\r\n        break;\r\n\r\n      case 'NotReadableError':\r\n        console.warn('@zxing/ngx-scanner', 'Couldn\\'t read the device(s)\\'s stream, it\\'s probably in use by another app.');\r\n        // no permissions claimed\r\n        permission = null;\r\n        // there are devices, which I couldn't use\r\n        this.hasDevices.next(false);\r\n        // tells the listener about the error\r\n        this.camerasNotFound.next(err);\r\n        break;\r\n\r\n      default:\r\n        console.warn('@zxing/ngx-scanner', 'I was not able to define if I have permissions for camera or not.', err);\r\n        // unknown\r\n        permission = null;\r\n        // this.hasDevices.next(undefined;\r\n        break;\r\n\r\n    }\r\n\r\n    this.setPermission(permission);\r\n\r\n    // tells the listener about the error\r\n    this.permissionResponse.error(err);\r\n\r\n    return permission;\r\n  }\r\n\r\n  /**\r\n   * Returns a valid BarcodeFormat or fails.\r\n   */\r\n  private getBarcodeFormatOrFail(format: string | BarcodeFormat): BarcodeFormat {\r\n    return typeof format === 'string'\r\n      ? BarcodeFormat[format.trim().toUpperCase()]\r\n      : format;\r\n  }\r\n\r\n  /**\r\n   * Return a code reader, create one if non exist\r\n   */\r\n  private getCodeReader(): BrowserMultiFormatContinuousReader {\r\n\r\n    if (!this._codeReader) {\r\n      const options = {\r\n        delayBetweenScanAttempts: this.timeBetweenScans,\r\n        delayBetweenScanSuccess: this.delayBetweenScanSuccess\r\n      };\r\n      this._codeReader = new BrowserMultiFormatContinuousReader(this.hints, options);\r\n    }\r\n\r\n    return this._codeReader;\r\n  }\r\n\r\n  /**\r\n   * Starts the continuous scanning for the given device.\r\n   *\r\n   * @param deviceId The deviceId from the device.\r\n   */\r\n  private async scanFromDevice(deviceId: string): Promise<void> {\r\n\r\n    const videoElement = this.previewElemRef.nativeElement;\r\n\r\n    const codeReader = this.getCodeReader();\r\n\r\n    const scanStream = await codeReader.scanFromDeviceObservable(deviceId, videoElement);\r\n\r\n    if (!scanStream) {\r\n      throw new Error('Undefined decoding stream, aborting.');\r\n    }\r\n\r\n    const next = (x: ResultAndError) => this._onDecodeResult(x.result, x.error);\r\n    const error = (err: any) => this._onDecodeError(err);\r\n    const complete = () => {\r\n    };\r\n\r\n    this._scanSubscription = scanStream.subscribe(next, error, complete);\r\n\r\n    if (this._scanSubscription.closed) {\r\n      return;\r\n    }\r\n\r\n    const controls = codeReader.getScannerControls();\r\n    const hasTorchControl = typeof controls.switchTorch !== 'undefined';\r\n\r\n    this.torchCompatible.next(hasTorchControl);\r\n  }\r\n\r\n  /**\r\n   * Handles decode errors.\r\n   */\r\n  private _onDecodeError(err: any) {\r\n    this.dispatchScanError(err);\r\n    // this.reset();\r\n  }\r\n\r\n  /**\r\n   * Handles decode results.\r\n   */\r\n  private _onDecodeResult(result: Result, error: Exception): void {\r\n\r\n    if (result) {\r\n      this.dispatchScanSuccess(result);\r\n    } else {\r\n      this.dispatchScanFailure(error);\r\n    }\r\n\r\n    this.dispatchScanComplete(result);\r\n  }\r\n\r\n  /**\r\n   * Stops the code reader and returns the previous selected device.\r\n   */\r\n  private _reset(): MediaDeviceInfo {\r\n\r\n    if (!this._codeReader) {\r\n      return;\r\n    }\r\n\r\n    // clearing codeReader first to prevent setOptions error appearing in several Chromium versions\r\n    this._codeReader = undefined;\r\n\r\n    const device = this._device;\r\n    // do not set this.device inside this method, it would create a recursive loop\r\n    this.device = undefined;\r\n\r\n\r\n    return device;\r\n  }\r\n\r\n  /**\r\n   * Resets the scanner and emits device change.\r\n   */\r\n  public reset(): void {\r\n    this._reset();\r\n    this.deviceChange.emit(null);\r\n  }\r\n\r\n  /**\r\n   * Sets the current device.\r\n   */\r\n  private async setDevice(device: MediaDeviceInfo): Promise<void> {\r\n\r\n    // instantly stops the scan before changing devices\r\n    this.scanStop();\r\n\r\n    // correctly sets the new (or none) device\r\n    this._device = device || undefined;\r\n\r\n    if (!this._device) {\r\n      // cleans the video because user removed the device\r\n      BrowserCodeReader.cleanVideoSource(this.previewElemRef.nativeElement);\r\n    }\r\n\r\n    // if enabled, starts scanning\r\n    if (this._enabled && device) {\r\n      await this.scanFromDevice(device.deviceId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the permission value and emits the event.\r\n   */\r\n  private setPermission(hasPermission: boolean | null): void {\r\n    this.hasPermission = hasPermission;\r\n    this.permissionResponse.next(hasPermission);\r\n  }\r\n\r\n}\r\n","<video #preview [style.object-fit]=\"previewFitMode\" [poster]=\"poster\">\r\n  <p>\r\n    Your browser does not support this feature, please try to upgrade it.\r\n  </p>\r\n  <p>\r\n    Seu navegador não suporta este recurso, por favor tente atualizá-lo.\r\n  </p>\r\n</video>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ZXingScannerComponent } from './zxing-scanner.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule\r\n  ],\r\n  declarations: [ZXingScannerComponent],\r\n  exports: [ZXingScannerComponent],\r\n})\r\nexport class ZXingScannerModule { }\r\n","/*\r\n * Public API Surface of zxing-scanner\r\n */\r\n\r\nexport * from './lib/zxing-scanner.module';\r\nexport * from './lib/zxing-scanner.component';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}